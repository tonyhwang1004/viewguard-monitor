"""
ViewGuard Student Monitor - ÏàúÏ∞® Ï±ÑÎÑê Ï†ÑÌôò Î∞©Ïãù
16Í∞ú Ï±ÑÎÑêÏùÑ ÌïòÎÇòÏî© Í≥†ÌôîÏßàÎ°ú Ï∫°Ï≤òÌïòÏó¨ Î∂ÑÏÑù
"""
import cv2
import numpy as np
import time
import json
import os
import sys
sys.path.append('src')

from datetime import datetime, timedelta
from typing import Dict, Optional

from advanced_detector import AdvancedDrowsinessDetector
from channel_controller import ChannelController
from alert_system import TelegramAlert, ConsoleAlert


class SequentialStudentMonitor:
    """ÏàúÏ∞® Ï±ÑÎÑê Ï†ÑÌôò Î∞©Ïãù Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖú"""
    
    def __init__(self, config_path: str = 'config/settings.json'):
        """
        Ï¥àÍ∏∞Ìôî
        Args:
            config_path: ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú
        """
        print("=" * 70)
        print("üéØ ViewGuard Monitor - ÏàúÏ∞® Ï±ÑÎÑê Ï†ÑÌôò Î∞©Ïãù (Í≥†ÌôîÏßà)")
        print("=" * 70)
        
        # ÏÑ§Ï†ï Î°úÎìú
        self.config = self.load_config(config_path)
        detection_config = self.config.get('detection', {})
        
        # Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî
        print("\nüì¶ Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî Ï§ë...")
        
        # Ï±ÑÎÑê Ïª®Ìä∏Î°§Îü¨
        self.controller = ChannelController()
        
        # Ï°∏Ïùå Í∞êÏßÄÍ∏∞
        self.detector = AdvancedDrowsinessDetector(detection_config)
        
        # ÏïåÎ¶º ÏãúÏä§ÌÖú
        self.alert = TelegramAlert(config_path)
        if not self.alert.enabled:
            self.alert = ConsoleAlert()
            print("üì± ÏΩòÏÜî ÏïåÎ¶º Î™®Îìú")
        
        # Ï¢åÏÑùÎ≥Ñ ÏÉÅÌÉú (Ï±ÑÎÑê = Ï¢åÏÑù)
        self.channel_states: Dict[int, Dict] = {}
        
        # ÏÑ§Ï†ïÍ∞í
        self.CONFIDENCE_THRESHOLD = detection_config.get('confidence_threshold', 0.75)
        self.DROWSY_THRESHOLD = detection_config.get('drowsy_count_threshold', 5)
        self.CHECK_INTERVAL = detection_config.get('check_interval', 2)
        self.ALERT_COOLDOWN = detection_config.get('alert_cooldown', 300)
        
        # ÏàúÏ∞® Ï∫°Ï≤ò ÏÑ§Ï†ï
        self.FULL_CYCLE_INTERVAL = 60  # Ï†ÑÏ≤¥ ÏÇ¨Ïù¥ÌÅ¥ Ï£ºÍ∏∞ (Ï¥à) - 16Í∞ú Ï±ÑÎÑê ÏàúÌöå
        
        # ÌÜµÍ≥Ñ
        self.stats = {
            'total_cycles': 0,
            'total_checks': 0,
            'drowsy_detections': 0,
            'alerts_sent': 0,
            'start_time': datetime.now()
        }
        
        print(f"‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!")
        print(f"\nüìä ÏÑ§Ï†ï:")
        print(f"   - Ïã†Î¢∞ÎèÑ ÏûÑÍ≥ÑÍ∞í: {self.CONFIDENCE_THRESHOLD*100}%")
        print(f"   - Ïó∞ÏÜç Í∞êÏßÄ ÌöüÏàò: {self.DROWSY_THRESHOLD}Ìöå")
        print(f"   - Ï†ÑÏ≤¥ ÏÇ¨Ïù¥ÌÅ¥ Ï£ºÍ∏∞: {self.FULL_CYCLE_INTERVAL}Ï¥à")
        print(f"   - ÏïåÎ¶º Ïø®Îã§Ïö¥: {self.ALERT_COOLDOWN}Ï¥à")
        print(f"üì∫ ÌôúÏÑ± Ï±ÑÎÑê: {self.controller.total_channels}Í∞ú")
        print("=" * 70)
    
    def load_config(self, config_path: str) -> dict:
        """ÏÑ§Ï†ï ÌååÏùº Î°úÎìú"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  ÏÑ§Ï†ï ÌååÏùº Î°úÎìú Ïã§Ìå®, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©: {e}")
            return {}
    
    def initialize_channel_state(self, channel_num: int) -> Dict:
        """Ï±ÑÎÑê ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî"""
        return {
            'drowsy_count': 0,
            'last_alert_time': None,
            'has_person': False,
            'history': [],
            'total_checks': 0,
            'total_drowsy': 0,
            'last_check_time': None
        }
    
    def detect_person(self, image: np.ndarray) -> bool:
        """
        Ïù¥ÎØ∏ÏßÄÏóê ÏÇ¨ÎûåÏù¥ ÏûàÎäîÏßÄ Í∞êÏßÄ
        
        Args:
            image: Ï∫°Ï≤ò Ïù¥ÎØ∏ÏßÄ
            
        Returns:
            ÏÇ¨ÎûåÏù¥ ÏûàÏúºÎ©¥ True
        """
        # MediaPipe Í∞êÏßÄ Í≤∞Í≥ºÎ°ú ÌåêÎã®
        is_drowsy, confidence, details = self.detector.detect_drowsiness(image)
        
        # ÏñºÍµ¥Ïù¥ Í∞êÏßÄÎêòÎ©¥ ÏÇ¨Îûå ÏûàÏùå
        if 'status' in details and details['status'] != 'no_face_detected':
            return True
        
        return False
    
    def process_channel(self, channel_num: int, image: np.ndarray):
        """
        Í∞úÎ≥Ñ Ï±ÑÎÑê Ï≤òÎ¶¨
        
        Args:
            channel_num: Ï±ÑÎÑê Î≤àÌò∏
            image: Ï∫°Ï≤òÎêú Ïù¥ÎØ∏ÏßÄ
        """
        # ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        if channel_num not in self.channel_states:
            self.channel_states[channel_num] = self.initialize_channel_state(channel_num)
        
        state = self.channel_states[channel_num]
        state['total_checks'] += 1
        state['last_check_time'] = datetime.now()
        
        # Ï°∏Ïùå Í∞êÏßÄ
        is_drowsy, confidence, details = self.detector.detect_drowsiness(image)
        
        # ÏÇ¨Îûå ÏóÜÏùå
        if 'status' in details and details['status'] == 'no_face_detected':
            state['has_person'] = False
            state['drowsy_count'] = 0
            return
        
        state['has_person'] = True
        
        # ÌûàÏä§ÌÜ†Î¶¨ ÏóÖÎç∞Ïù¥Ìä∏
        state['history'].append({
            'timestamp': datetime.now(),
            'drowsy': is_drowsy,
            'confidence': confidence,
            'details': details
        })
        
        if len(state['history']) > 10:
            state['history'].pop(0)
        
        # Ïã†Î¢∞ÎèÑ ÎÜíÏùÄ Í≤ΩÏö∞Îßå Ï≤òÎ¶¨
        if is_drowsy and confidence >= self.CONFIDENCE_THRESHOLD:
            state['drowsy_count'] += 1
            state['total_drowsy'] += 1
            self.stats['drowsy_detections'] += 1
            
            print(f"üí§ [CH{channel_num:02d}] Ï°∏Ïùå Í∞êÏßÄ! "
                  f"(Ïπ¥Ïö¥Ìä∏: {state['drowsy_count']}/{self.DROWSY_THRESHOLD}, "
                  f"Ïã†Î¢∞ÎèÑ: {confidence:.1%}, "
                  f"EAR: {details['ear']:.3f}, "
                  f"Tilt: {details['head_tilt']:.3f})")
            
            # Ïó∞ÏÜç Í∞êÏßÄ ÏûÑÍ≥ÑÍ∞í ÎèÑÎã¨ Ïãú ÏïåÎ¶º
            if state['drowsy_count'] >= self.DROWSY_THRESHOLD:
                if self.should_send_alert(channel_num):
                    self.send_alert(channel_num, confidence, details)
                    state['drowsy_count'] = 0
        else:
            # Ï†ïÏÉÅ ÏÉÅÌÉúÎ©¥ Ïπ¥Ïö¥ÌÑ∞ Ï†êÏßÑÏ†Å Í∞êÏÜå
            if state['drowsy_count'] > 0:
                state['drowsy_count'] -= 1
    
    def should_send_alert(self, channel_num: int) -> bool:
        """ÏïåÎ¶ºÏùÑ Î≥¥ÎÇ¥Ïïº ÌïòÎäîÏßÄ ÌôïÏù∏"""
        state = self.channel_states[channel_num]
        last_alert = state['last_alert_time']
        
        if last_alert is None:
            return True
        
        elapsed = (datetime.now() - last_alert).seconds
        return elapsed >= self.ALERT_COOLDOWN
    
    def send_alert(self, channel_num: int, confidence: float, details: dict):
        """ÏïåÎ¶º Î∞úÏÜ°"""
        success = self.alert.send_drowsy_alert(f"CH{channel_num:02d}", confidence, details)
        
        if success:
            self.channel_states[channel_num]['last_alert_time'] = datetime.now()
            self.stats['alerts_sent'] += 1
            print(f"‚úÖ [CH{channel_num:02d}] ÏïåÎ¶º Î∞úÏÜ° ÏôÑÎ£å")
    
    def run_single_cycle(self, debug_mode: bool = False):
        """
        Ìïú Î≤àÏùò Ï†ÑÏ≤¥ ÏÇ¨Ïù¥ÌÅ¥ Ïã§Ìñâ (16Í∞ú Ï±ÑÎÑê ÏàúÌöå)
        
        Args:
            debug_mode: TrueÎ©¥ ÌôîÎ©¥ ÌëúÏãú
            
        Returns:
            ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        print("\n" + "=" * 70)
        print(f"üîÑ ÏÇ¨Ïù¥ÌÅ¥ #{self.stats['total_cycles'] + 1} ÏãúÏûë")
        print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 70)
        
        cycle_start_time = time.time()
        
        for ch_num in range(1, self.controller.total_channels + 1):
            try:
                # Ï±ÑÎÑê Ï†ÑÌôò
                print(f"\n[{ch_num}/16] CH{ch_num:02d} Ï≤òÎ¶¨ Ï§ë...")
                
                if not self.controller.switch_to_channel(ch_num):
                    print(f"‚ö†Ô∏è  CH{ch_num:02d} Ï†ÑÌôò Ïã§Ìå®")
                    continue
                
                # ÌôîÎ©¥ Ï∫°Ï≤ò
                image = self.controller.capture_current_channel()
                
                if image is None:
                    print(f"‚ö†Ô∏è  CH{ch_num:02d} Ï∫°Ï≤ò Ïã§Ìå®")
                    continue
                
                h, w = image.shape[:2]
                print(f"üì∏ Ï∫°Ï≤ò ÏôÑÎ£å ({w}x{h})")
                
                # Ï°∏Ïùå Î∂ÑÏÑù
                self.process_channel(ch_num, image)
                self.stats['total_checks'] += 1
                
                # ÎîîÎ≤ÑÍ∑∏ Î™®Îìú: ÌôîÎ©¥ ÌëúÏãú
                if debug_mode:
                    # Í∞êÏßÄ Í≤∞Í≥º Í∑∏Î¶¨Í∏∞
                    is_drowsy, confidence, details = self.detector.detect_drowsiness(image)
                    debug_img = self.detector.draw_debug_info(image, details)
                    
                    # Ï±ÑÎÑê Ï†ïÎ≥¥ Ï∂îÍ∞Ä
                    cv2.putText(debug_img, f"CH {ch_num:02d}", (10, 150),
                               cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255, 255, 255), 3)
                    
                    # ÌôîÎ©¥ ÌÅ¨Í∏∞ Ï°∞Ï†ï
                    if w > 1280:
                        scale = 1280 / w
                        new_w = 1280
                        new_h = int(h * scale)
                        debug_img = cv2.resize(debug_img, (new_w, new_h))
                    
                    cv2.imshow('Sequential Monitor Debug', debug_img)
                    
                    key = cv2.waitKey(100) & 0xFF
                    if key == 27:  # ESC
                        print("\nÏÇ¨Ïö©Ïûê Ï¢ÖÎ£å")
                        return False
            
            except Exception as e:
                print(f"‚ùå CH{ch_num:02d} Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {e}")
                continue
        
        # ÏÇ¨Ïù¥ÌÅ¥ ÏôÑÎ£å
        cycle_time = time.time() - cycle_start_time
        self.stats['total_cycles'] += 1
        
        print("\n" + "=" * 70)
        print(f"‚úÖ ÏÇ¨Ïù¥ÌÅ¥ #{self.stats['total_cycles']} ÏôÑÎ£å")
        print(f"‚è±Ô∏è  ÏÜåÏöî ÏãúÍ∞Ñ: {cycle_time:.1f}Ï¥à")
        print(f"üìä Ïù¥Î≤à ÏÇ¨Ïù¥ÌÅ¥: Ï≤¥ÌÅ¨ {self.controller.total_channels}Ìöå, "
              f"Ï°∏Ïùå Í∞êÏßÄ {sum(1 for s in self.channel_states.values() if s.get('drowsy_count', 0) > 0)}Í±¥")
        print("=" * 70)
        
        return True
    
    def print_statistics(self):
        """ÌÜµÍ≥Ñ Ï∂úÎ†•"""
        elapsed = datetime.now() - self.stats['start_time']
        hours = elapsed.seconds // 3600
        minutes = (elapsed.seconds % 3600) // 60
        
        print("\n" + "=" * 70)
        print("üìä Î™®ÎãàÌÑ∞ÎßÅ ÌÜµÍ≥Ñ")
        print("=" * 70)
        print(f"‚è±Ô∏è  Ïã§Ìñâ ÏãúÍ∞Ñ: {hours}ÏãúÍ∞Ñ {minutes}Î∂Ñ")
        print(f"üîÑ ÏôÑÎ£åÎêú ÏÇ¨Ïù¥ÌÅ¥: {self.stats['total_cycles']}Ìöå")
        print(f"üîç Ï¥ù Ï≤¥ÌÅ¨: {self.stats['total_checks']}Ìöå")
        print(f"üí§ Ï°∏Ïùå Í∞êÏßÄ: {self.stats['drowsy_detections']}Ìöå")
        print(f"üö® ÏïåÎ¶º Î∞úÏÜ°: {self.stats['alerts_sent']}Ìöå")
        print()
        
        # Ï±ÑÎÑêÎ≥Ñ ÌÜµÍ≥Ñ
        print("Ï±ÑÎÑêÎ≥Ñ ÏÉÅÌÉú:")
        for ch_num in range(1, self.controller.total_channels + 1):
            if ch_num not in self.channel_states:
                continue
            
            state = self.channel_states[ch_num]
            status = "üë§ ÏÇ¨Ïö©Ï§ë" if state['has_person'] else "‚ö™ ÎπÑÏñ¥ÏûàÏùå"
            drowsy_rate = 0
            if state['total_checks'] > 0:
                drowsy_rate = (state['total_drowsy'] / state['total_checks']) * 100
            
            print(f"  CH{ch_num:02d}: {status} | "
                  f"Ï≤¥ÌÅ¨: {state['total_checks']}Ìöå | "
                  f"Ï°∏Ïùå: {state['total_drowsy']}Ìöå ({drowsy_rate:.1f}%)")
        
        print("=" * 70 + "\n")
    
    def run(self, debug_mode: bool = False):
        """
        Î©îÏù∏ Î™®ÎãàÌÑ∞ÎßÅ Î£®ÌîÑ
        
        Args:
            debug_mode: TrueÎ©¥ ÌôîÎ©¥ ÌëúÏãú
        """
        print("\nüöÄ ÏàúÏ∞® Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë!")
        print(f"   - Ï†ÑÏ≤¥ ÏÇ¨Ïù¥ÌÅ¥ Ï£ºÍ∏∞: ÏïΩ {self.FULL_CYCLE_INTERVAL}Ï¥à")
        print(f"   - Ctrl+CÎ°ú Ï¢ÖÎ£å")
        print()
        
        # Ï±ÑÎÑê Î≤ÑÌäº ÏÑ§Ï†ï ÌôïÏù∏
        if not self.controller.channel_buttons:
            print("‚ùå Ï±ÑÎÑê Î≤ÑÌäºÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
            print("   Î®ºÏ†Ä channel_setup.pyÎ•º Ïã§ÌñâÌïòÏó¨ Ï±ÑÎÑê Î≤ÑÌäºÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.")
            return
        
        last_stats_time = datetime.now()
        
        try:
            while True:
                # Ìïú ÏÇ¨Ïù¥ÌÅ¥ Ïã§Ìñâ
                if not self.run_single_cycle(debug_mode):
                    break
                
                # Ï£ºÍ∏∞Ï†Å ÌÜµÍ≥Ñ (10Î∂ÑÎßàÎã§)
                if (datetime.now() - last_stats_time).seconds >= 600:
                    self.print_statistics()
                    last_stats_time = datetime.now()
                
                # Îã§Ïùå ÏÇ¨Ïù¥ÌÅ¥ÍπåÏßÄ ÎåÄÍ∏∞
                # (ÏÇ¨Ïù¥ÌÅ¥ ÏÜåÏöî ÏãúÍ∞ÑÏùÑ Í≥†Î†§ÌïòÏó¨ Ï°∞Ï†ï)
                print(f"\n‚è∏Ô∏è  Îã§Ïùå ÏÇ¨Ïù¥ÌÅ¥ÍπåÏßÄ ÎåÄÍ∏∞ Ï§ë...\n")
                time.sleep(max(5, self.FULL_CYCLE_INTERVAL / 16))  # ÏµúÏÜå 5Ï¥à
        
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  Î™®ÎãàÌÑ∞ÎßÅ Ï¢ÖÎ£å")
        except Exception as e:
            print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # ÏµúÏ¢Ö ÌÜµÍ≥Ñ
            self.print_statistics()
            
            if debug_mode:
                cv2.destroyAllWindows()
            
            print("‚úÖ ÏãúÏä§ÌÖú Ï¢ÖÎ£å")


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='ViewGuard Sequential Monitor - ÏàúÏ∞® Ï±ÑÎÑê Ï†ÑÌôò Î∞©Ïãù'
    )
    parser.add_argument('--debug', action='store_true',
                       help='ÎîîÎ≤ÑÍ∑∏ Î™®Îìú (ÌôîÎ©¥ ÌëúÏãú)')
    parser.add_argument('--config', type=str,
                       default='config/settings.json',
                       help='ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú')
    
    args = parser.parse_args()
    
    # Î™®ÎãàÌÑ∞ Ïã§Ìñâ
    monitor = SequentialStudentMonitor(args.config)
    monitor.run(debug_mode=args.debug)


if __name__ == "__main__":
    main()
